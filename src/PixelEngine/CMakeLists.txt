PROJECT(pixelengine)
cmake_minimum_required (VERSION 2.8.0)
if(WIN32)
    if (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} GREATER 3.0)
        add_compile_options($<$<CXX_COMPILER_ID:MSVC>:/MP>)
    endif()
endif()

if(WIN32)
    if(MINGW)
        set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
    endif()
else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g -std=c++11")
endif()
SET(CMAKE_AUTOMOC ON)
SET(QT_USE_QTCORE TRUE)
SET(QT_USE_QTNETWORK TRUE)

if (QT6_BUILD)
  find_package(Qt6Core REQUIRED)
  find_package(Qt6Gui REQUIRED)
  find_package(Qt6Xml REQUIRED)
  find_package(Qt6Qml REQUIRED)
  find_package(Qt6Widgets REQUIRED)
  find_package(Qt6Network REQUIRED)
  find_package(Qt6 REQUIRED COMPONENTS OpenGLWidgets)
  set(QT_INCLUDES ${Qt6Gui_INCLUDE_DIRS} ${Qt6Qml_INCLUDE_DIRS} ${Qt6Widgets_INCLUDE_DIRS} ${Qt6Network_INCLUDE_DIRS} ${Qt6Xml_INCLUDE_DIRS} ${Qt6Svg_INCLUDE_DIRS} ${Qt6OpenGLWidgets_INCLUDE_DIRS})            
elseif(QT5_BUILD)
  find_package(Qt5Core REQUIRED)
  find_package(Qt5Widgets REQUIRED)
  find_package(Qt5Multimedia REQUIRED)
  find_package(Qt5Xml REQUIRED)
  find_package(Qt5Gui REQUIRED)
  find_package(Qt5Network REQUIRED)
  set(QT_INCLUDES ${Qt5Gui_INCLUDE_DIRS} ${Qt5Widgets_INCLUDE_DIRS} ${Qt5Network_INCLUDE_DIRS} ${Qt5Svg_INCLUDE_DIRS})
  include_directories(${QT_INCLUDES})
else()
  find_package(Qt4 REQUIRED)
endif()

file (GLOB src "*.cpp" "*/*.cpp")
file (GLOB resources "*.qrc")
file (GLOB hx "*.h" "*/*.h")

if (QT6_BUILD)
    QT6_WRAP_CPP(pixelengine_HEADERS_MOC ${pixelengine_HEADERS})
    QT6_ADD_RESOURCES(pixelengine_RESOURCES_RCC ${resources})
elseif(QT5_BUILD)
    QT5_WRAP_CPP(pixelengine_HEADERS_MOC ${pixelengine_HEADERS})
    QT5_ADD_RESOURCES(pixelengine_RESOURCES_RCC ${resources})
else()
    QT4_WRAP_CPP(pixelengine_HEADERS_MOC ${pixelengine_HEADERS})
    QT4_ADD_RESOURCES(pixelengine_RESOURCES_RCC ${resources})
endif()

if (NOT QT5_BUILD AND NOT QT6_BUILD)
  INCLUDE(${QT_USE_FILE})
endif()

ADD_DEFINITIONS(${QT_DEFINITIONS})
ADD_DEFINITIONS(-DQT_USE_QSTRINGBUILDER)

ADD_LIBRARY(pixelengine SHARED ${src} ${hx})
if (QT6_BUILD)
  TARGET_LINK_LIBRARIES(pixelengine Qt6::Core Qt6::Network Qt6::Xml Qt6::Widgets Qt6::OpenGLWidgets)
elseif(QT5_BUILD)
  TARGET_LINK_LIBRARIES(pixelengine Qt5::Core Qt5::Network Qt5::Xml Qt5::Widgets)
endif()

if (NOT WIN32)
  INSTALL(TARGETS pixelengine LIBRARY DESTINATION lib)
endif()
